// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ConsoleApp15;
//
//    var weatherStack = WeatherStack.FromJson(jsonString);

namespace WeatherAggregator
{
    using System;
    using System.Collections.Generic;
    using Newtonsoft.Json;

    public partial class WeatherStackDeserializer
    {
        [JsonProperty("request", NullValueHandling = NullValueHandling.Include)]
        public Request Request { get; set; }

        [JsonProperty("location", NullValueHandling = NullValueHandling.Ignore)]
        public Location Location { get; set; }

        [JsonProperty("current", NullValueHandling = NullValueHandling.Ignore)]
        public Current Current { get; set; }
    }

    public partial class Current
    {
        [JsonProperty("observation_time", NullValueHandling = NullValueHandling.Ignore)]
        public string ObservationTime { get; set; }

        [JsonProperty("temperature", NullValueHandling = NullValueHandling.Ignore)]
        public long Temperature { get; set; }

        [JsonProperty("weather_code", NullValueHandling = NullValueHandling.Ignore)]
        public long? WeatherCode { get; set; }

        [JsonProperty("weather_icons", NullValueHandling = NullValueHandling.Ignore)]
        public List<Uri> WeatherIcons { get; set; }

        [JsonProperty("weather_descriptions", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> WeatherDescriptions { get; set; }

        [JsonProperty("wind_speed", NullValueHandling = NullValueHandling.Ignore)]
        public long? WindSpeed { get; set; }

        [JsonProperty("wind_degree", NullValueHandling = NullValueHandling.Ignore)]
        public long? WindDegree { get; set; }

        [JsonProperty("wind_dir", NullValueHandling = NullValueHandling.Ignore)]
        public string WindDir { get; set; }

        [JsonProperty("pressure", NullValueHandling = NullValueHandling.Ignore)]
        public long? Pressure { get; set; }

        [JsonProperty("precip", NullValueHandling = NullValueHandling.Ignore)]
        public long? Precip { get; set; }

        [JsonProperty("humidity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Humidity { get; set; }

        [JsonProperty("cloudcover", NullValueHandling = NullValueHandling.Ignore)]
        public long? Cloudcover { get; set; }

        [JsonProperty("feelslike", NullValueHandling = NullValueHandling.Ignore)]
        public long? Feelslike { get; set; }

        [JsonProperty("uv_index", NullValueHandling = NullValueHandling.Ignore)]
        public long? UvIndex { get; set; }

        [JsonProperty("visibility", NullValueHandling = NullValueHandling.Ignore)]
        public long? Visibility { get; set; }

        [JsonProperty("is_day", NullValueHandling = NullValueHandling.Ignore)]
        public string IsDay { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("region", NullValueHandling = NullValueHandling.Ignore)]
        public string Region { get; set; }

        [JsonProperty("lat", NullValueHandling = NullValueHandling.Ignore)]
        public string Lat { get; set; }

        [JsonProperty("lon", NullValueHandling = NullValueHandling.Ignore)]
        public string Lon { get; set; }

        [JsonProperty("timezone_id", NullValueHandling = NullValueHandling.Ignore)]
        public string TimezoneId { get; set; }

        [JsonProperty("localtime", NullValueHandling = NullValueHandling.Ignore)]
        public string Localtime { get; set; }

        [JsonProperty("localtime_epoch", NullValueHandling = NullValueHandling.Ignore)]
        public long? LocaltimeEpoch { get; set; }

        [JsonProperty("utc_offset", NullValueHandling = NullValueHandling.Ignore)]
        public string UtcOffset { get; set; }
    }

    public partial class Request
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("query", NullValueHandling = NullValueHandling.Ignore)]
        public string Query { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        [JsonProperty("unit", NullValueHandling = NullValueHandling.Ignore)]
        public string Unit { get; set; }
    }
}
